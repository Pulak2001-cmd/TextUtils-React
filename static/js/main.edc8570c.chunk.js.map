{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","e","target","rows","newtext","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","newText","split","join","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.edc8570c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n              \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'light'? 'dark': 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{`Enable ${props.mode === 'light'? 'dark': 'light'} Mode`}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const handleUpClick = ()=>{\r\n        let newtext = text.toUpperCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n    const handleOnChange = (e)=>{\r\n        setText(e.target.value)\r\n    }\r\n    const handleLowClick = (e)=>{\r\n        let newtext = text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n    const handleclear = ()=>{\r\n        setText(\"\")\r\n        props.showAlert(\"Text cleared\", \"success\")\r\n    }\r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text) \r\n        props.showAlert(\"Copies to clipboard\", \"success\")\r\n    }\r\n    const removeExtraSpace = ()=>{\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join([\" \"]))\r\n        props.showAlert(\"Extra space removed\", \"success\")\r\n    }\r\n    const [text, setText] = useState(\"\")\r\n    return (\r\n        <>\r\n        <div style={{color: props.mode === 'light'?'black' : 'white'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\" style={{color: props.mode === 'light'?'black' : 'white'}}>\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode === 'light'?'white' : 'grey', color: props.mode === 'light'?'black' : 'white'}} value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Upercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleclear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={removeExtraSpace}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'light'?'black' : 'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.length===0? 0 : text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{text.length===0? 0 : 0.008 * text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text : \"Enter something in the above textbox to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css'\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\"\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      showAlert(\"Dark mode has been enabled\", \"danger\")\n      document.title = \"TextUtils - Dark Mode\"\n      // setInterval(() => {\n      //   document.title = \"Buy TextUtils\"\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"this is amazing\"\n      // }, 1500);\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      // showAlert(\"Light mode has been enabled\", \"success\")\n      showAlert(\"Light mode has been enabled\", \"success\")\n      document.title = \"TextUtils\"\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n      </Switch> */}\n        \n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}